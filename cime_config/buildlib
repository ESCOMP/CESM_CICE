#!/usr/bin/env python3

import os, shutil, sys, glob, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "CIME", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd
from CIME.buildlib import parse_input
from CIME.build import get_standard_makefile_args

logger = logging.getLogger(__name__)

###############################################################################
def _build_cice():
    ###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    with Case(caseroot) as case:
        casetools = case.get_value("CASETOOLS")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        srcroot = case.get_value("SRCROOT")
        driver = case.get_value("COMP_INTERFACE")

        # create Filepath file
        objroot = case.get_value("OBJROOT")
        filepath_file = os.path.join(objroot, "ice", "obj", "Filepath")
        if not os.path.isfile(filepath_file):
            srcroot = case.get_value("SRCROOT")
            caseroot = case.get_value("CASEROOT")
            comp_root_dir_ice = case.get_value("COMP_ROOT_DIR_ICE")
            paths = [
                os.path.join(caseroot, "SourceMods", "src.cice"),
                os.path.join(comp_root_dir_ice, "src", "cicecore", "shared"),
                os.path.join(comp_root_dir_ice, "src", "icepack", "columnphysics"),
                os.path.join(
                    comp_root_dir_ice, "src", "cicecore", "cicedyn", "infrastructure"
                ),
                os.path.join(
                    comp_root_dir_ice,
                    "src",
                    "cicecore",
                    "cicedyn",
                    "infrastructure",
                    "io",
                    "io_pio2",
                ),
                os.path.join(
                    comp_root_dir_ice,
                    "src",
                    "cicecore",
                    "cicedyn",
                    "infrastructure",
                    "comm",
                    "mpi",
                ),
                os.path.join(
                    comp_root_dir_ice, "src", "cicecore", "cicedyn", "analysis"
                ),
                os.path.join(
                    comp_root_dir_ice, "src", "cicecore", "cicedyn", "dynamics"
                ),
                os.path.join(
                    comp_root_dir_ice, "src", "cicecore", "cicedyn", "general"
                ),
            ]
            if driver == "nuopc":
                paths.append(
                    os.path.join(
                        comp_root_dir_ice,
                        "src",
                        "cicecore",
                        "drivers",
                        "nuopc",
                        "cmeps",
                    )
                )
            else:
                expect(False, "only the CMEPS nuopc driver is current supported")

            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")

        # set the cice_cppdefs
        cice_cppdefs = " -Dncdf"
        if (
            case.get_value("COMP_ATM") == "fv3gfs"
            and case.get_value("COMP_OCN") == "mom"
        ):
            # the following is only relevant if the UFS S2S uses CIME
            cice_cppdefs = cice_cppdefs + " -DNEMS_COUPLED"
        if "ar9v" in case.get_value("ICE_GRID"):
            # trigger RASM options with ar9v grid, otherwise set CESM options
            cice_cppdefs = cice_cppdefs + " -DRASM_MODS"

        # build the library
        complib = os.path.join(libroot, "libice.a")
        makefile = os.path.join(casetools, "Makefile")

        cmd = '{} complib -j {} COMP_NAME=cice COMPLIB={} -f {} USER_CPPDEFS="{}" {} '.format(
            gmake,
            gmake_j,
            complib,
            makefile,
            cice_cppdefs,
            get_standard_makefile_args(case),
        )

        rc, out, err = run_cmd(cmd, from_dir=bldroot)
        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))

        logger.info("Command %s completed with output %s\nerr %s", cmd, out, err)


if __name__ == "__main__":
    _build_cice()
